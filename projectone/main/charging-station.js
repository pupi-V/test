// JavaScript –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ä—è–¥–Ω—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏ ESP32
class ChargingStationManager {
    constructor() {
        this.currentTheme = 'light';
        this.selectedStation = 1;
        this.stations = new Map();
        this.lastUpdate = null;
        this.refreshInterval = null;
        
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadInitialData();
        this.startAutoRefresh();
        this.updateLastUpdateTime();
    }

    setupEventListeners() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        setInterval(() => this.updateLastUpdateTime(), 1000);
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∞–º–∏
    showTab(tabId) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.classList.remove('active');
        });
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.getElementById(tabId).classList.add('active');
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
        event.target.classList.add('active');
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    toggleTheme() {
        this.currentTheme = this.currentTheme === 'light' ? 'dark' : 'light';
        document.body.classList.toggle('dark');
        
        const themeBtn = document.getElementById('theme-btn');
        themeBtn.textContent = this.currentTheme === 'light' ? 'üåô' : '‚òÄÔ∏è';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –≤ localStorage
        localStorage.setItem('theme', this.currentTheme);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async loadInitialData() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme && savedTheme === 'dark') {
                this.toggleTheme();
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–π
            await this.refreshStationData();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
            this.updateConnectionStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', false);
        }
    }

    // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ESP32 –ø–ª–∞—Ç
    async scanBoards() {
        const scanBtn = document.getElementById('scan-btn');
        const scanResults = document.getElementById('scan-results');
        
        scanBtn.disabled = true;
        scanBtn.textContent = 'üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...';
        scanResults.innerHTML = '<p>–ü–æ–∏—Å–∫ ESP32 –ø–ª–∞—Ç –≤ —Å–µ—Ç–∏...</p>';

        try {
            // –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            const response = await fetch('/api/esp32/scan', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const boards = await response.json();
            this.displayScanResults(boards);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            scanResults.innerHTML = `<p style="color: var(--danger-color);">–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}</p>`;
        } finally {
            scanBtn.disabled = false;
            scanBtn.textContent = '–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å';
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    displayScanResults(boards) {
        const scanResults = document.getElementById('scan-results');
        
        if (boards.length === 0) {
            scanResults.innerHTML = '<p>ESP32 –ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏.</p>';
            return;
        }

        const boardsHtml = boards.map(board => `
            <div class="board-item" style="margin: 0.5rem 0; padding: 1rem; border: 1px solid var(--border-color); border-radius: 8px;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <strong>${board.name}</strong> (${board.type})
                        <br>
                        <small>IP: ${board.ip} | –°—Ç–∞—Ç—É—Å: ${board.status}</small>
                    </div>
                    <button onclick="stationManager.connectToSpecificBoard('${board.ip}')" 
                            style="background: var(--primary-color); color: white; border: none; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer;">
                        –ü–æ–¥–∫–ª—é—á–∏—Ç—å
                    </button>
                </div>
            </div>
        `).join('');

        scanResults.innerHTML = `
            <h4>–ù–∞–π–¥–µ–Ω–æ –ø–ª–∞—Ç: ${boards.length}</h4>
            ${boardsHtml}
        `;
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–ª–∞—Ç–µ –ø–æ IP
    async connectToBoard() {
        const ipInput = document.getElementById('manual-ip');
        const ip = ipInput.value.trim();
        
        if (!ip) {
            alert('–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å –ø–ª–∞—Ç—ã');
            return;
        }

        await this.connectToSpecificBoard(ip);
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç–µ
    async connectToSpecificBoard(ip) {
        try {
            const response = await fetch('/api/esp32/connect', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ ip })
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const result = await response.json();
            
            if (result.success) {
                alert(`–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø–ª–∞—Ç–µ ${ip}`);
                await this.refreshStationData();
            } else {
                alert(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${result.error}`);
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–ª–∞—Ç–µ:', error);
            alert(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
        }
    }

    // –í—ã–±–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    selectStation(stationId) {
        this.selectedStation = stationId;
        this.showTab('station-control');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        document.getElementById('selected-station').textContent = stationId;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏
        this.loadStationConfig(stationId);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏
    async loadStationConfig(stationId) {
        try {
            const response = await fetch(`/api/stations/${stationId}`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const station = await response.json();
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞–Ω—Ü–∏–∏
            document.getElementById('station-name').value = station.displayName || `–°—Ç–∞–Ω—Ü–∏—è ${stationId}`;
            document.getElementById('max-power').value = station.maxPower || 22;
            document.getElementById('station-type').value = station.typ || 'master';
            document.getElementById('charging-status').value = station.status || 'available';
            document.getElementById('current-power').value = station.currentPower || 0;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏:', error);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω—Ü–∏–∏
    async saveStationConfig() {
        const stationData = {
            displayName: document.getElementById('station-name').value,
            maxPower: parseFloat(document.getElementById('max-power').value),
            typ: document.getElementById('station-type').value,
            status: document.getElementById('charging-status').value,
            currentPower: parseFloat(document.getElementById('current-power').value)
        };

        try {
            const response = await fetch(`/api/stations/${this.selectedStation}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(stationData)
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
            await this.refreshStationData();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            alert(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
        }
    }

    // –°–±—Ä–æ—Å —Å—Ç–∞–Ω—Ü–∏–∏
    async resetStation() {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏?')) {
            return;
        }

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–±—Ä–æ—Å–∞ –Ω–∞ ESP32
            const response = await fetch(`/api/esp32/${this.selectedStation}/reset`, {
                method: 'POST'
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            alert('–°—Ç–∞–Ω—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞');
            await this.refreshStationData();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—Ç–∞–Ω—Ü–∏–∏:', error);
            alert(`–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: ${error.message}`);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async refreshData() {
        await this.refreshStationData();
        alert('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
    async refreshStationData() {
        try {
            const response = await fetch('/api/stations');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }

            const stations = await response.json();
            this.updateDashboard(stations);
            this.updateConnectionStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ', true);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            this.updateConnectionStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', false);
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
    updateDashboard(stations) {
        stations.forEach((station, index) => {
            const powerElement = document.getElementById(`power${index + 1}`);
            if (powerElement) {
                powerElement.textContent = station.currentPower || 0;
            }
        });

        this.lastUpdate = new Date();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    updateConnectionStatus(status, isConnected) {
        const statusElement = document.getElementById('connection-status');
        statusElement.textContent = isConnected ? 'üü¢ ' + status : 'üî¥ ' + status;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateLastUpdateTime() {
        const timeElement = document.getElementById('last-update');
        if (this.lastUpdate) {
            timeElement.textContent = this.lastUpdate.toLocaleTimeString();
        } else {
            timeElement.textContent = '--:--';
        }
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    startAutoRefresh() {
        this.refreshInterval = setInterval(() => {
            this.refreshStationData();
        }, 5000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    stopAutoRefresh() {
        if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
let stationManager;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    stationManager = new ChargingStationManager();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ HTML
function showTab(tabId) {
    stationManager.showTab(tabId);
}

function toggleTheme() {
    stationManager.toggleTheme();
}

function scanBoards() {
    stationManager.scanBoards();
}

function connectToBoard() {
    stationManager.connectToBoard();
}

function selectStation(stationId) {
    stationManager.selectStation(stationId);
}

function saveStationConfig() {
    stationManager.saveStationConfig();
}

function resetStation() {
    stationManager.resetStation();
}

function refreshData() {
    stationManager.refreshData();
}