#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ React –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è ESP32 16MB
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */

const fs = require('fs-extra');
const path = require('path');
const { execSync } = require('child_process');

const sourceDir = '../client';
const buildDir = './data/dist';
const tempDir = './temp_build';

console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è ESP32 16MB...\n');

async function buildWebInterface() {
  try {
    // 1. –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫
    console.log('1Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...');
    await fs.remove(buildDir);
    await fs.remove(tempDir);
    await fs.ensureDir(buildDir);
    await fs.ensureDir(tempDir);

    // 2. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    console.log('2Ô∏è‚É£ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤...');
    await fs.copy(sourceDir, tempDir);

    // 3. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è ESP32
    console.log('3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è ESP32...');
    await modifyConfigForESP32();

    // 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.log('4Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    execSync('npm install', { cwd: tempDir, stdio: 'inherit' });

    // 5. –°–±–æ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    console.log('5Ô∏è‚É£ –°–±–æ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏...');
    execSync('npm run build', { cwd: tempDir, stdio: 'inherit' });

    // 6. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    console.log('6Ô∏è‚É£ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
    const distPath = path.join(tempDir, 'dist');
    await fs.copy(distPath, buildDir);

    // 7. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è ESP32
    console.log('7Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è ESP32...');
    await optimizeForESP32();

    // 8. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Ñ–∞–π–ª–æ–≤
    console.log('8Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Ñ–∞–π–ª–æ–≤...');
    await createFileManifest();

    // 9. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    console.log('9Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    await fs.remove(tempDir);

    console.log('\n‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${buildDir}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await showBuildStats();

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏:', error.message);
    process.exit(1);
  }
}

async function modifyConfigForESP32() {
  // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è vite.config.ts –¥–ª—è ESP32
  const viteConfigPath = path.join(tempDir, 'vite.config.ts');
  const viteConfig = `
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  build: {
    outDir: 'dist',
    assetsDir: 'assets',
    minify: 'esbuild',
    sourcemap: false,
    target: 'es2015',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          ui: ['@radix-ui/react-dialog', '@radix-ui/react-dropdown-menu'],
          utils: ['clsx', 'tailwind-merge']
        },
        assetFileNames: (assetInfo) => {
          const info = assetInfo.name.split('.');
          const ext = info[info.length - 1];
          if (/png|jpe?g|svg|gif|tiff|bmp|ico/i.test(ext)) {
            return \`assets/images/[name]-[hash].\${ext}\`;
          }
          if (/css/i.test(ext)) {
            return \`assets/css/[name]-[hash].\${ext}\`;
          }
          return \`assets/[name]-[hash].\${ext}\`;
        },
        chunkFileNames: 'assets/js/[name]-[hash].js',
        entryFileNames: 'assets/js/[name]-[hash].js',
      },
    },
    chunkSizeWarningLimit: 1000,
    reportCompressedSize: false,
  },
  base: '/',
  server: {
    host: '0.0.0.0',
    port: 5173,
  },
  preview: {
    host: '0.0.0.0',
    port: 4173,
  }
})
`;

  await fs.writeFile(viteConfigPath, viteConfig);

  // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è package.json –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const packageJsonPath = path.join(tempDir, 'package.json');
  const packageJson = await fs.readJson(packageJsonPath);
  
  packageJson.scripts.build = 'vite build --mode production';
  packageJson.scripts['build:esp32'] = 'vite build --mode production && node ../optimize-for-esp32.js';
  
  await fs.writeJson(packageJsonPath, packageJson, { spaces: 2 });
}

async function optimizeForESP32() {
  // –°–∂–∞—Ç–∏–µ HTML —Ñ–∞–π–ª–æ–≤
  const htmlFiles = await getFilesByExtension(buildDir, '.html');
  for (const file of htmlFiles) {
    let content = await fs.readFile(file, 'utf8');
    
    // –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è HTML
    content = content
      .replace(/>\s+</g, '><')
      .replace(/\s+/g, ' ')
      .trim();
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ meta —Ç–µ–≥–æ–≤ –¥–ª—è ESP32
    content = content.replace('<head>', `<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="theme-color" content="#667eea">`);
    
    await fs.writeFile(file, content);
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è CSS —Ñ–∞–π–ª–æ–≤
  const cssFiles = await getFilesByExtension(buildDir, '.css');
  for (const file of cssFiles) {
    let content = await fs.readFile(file, 'utf8');
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    content = content
      .replace(/\/\*[\s\S]*?\*\//g, '')
      .replace(/\s+/g, ' ')
      .replace(/;\s*}/g, '}')
      .replace(/{\s*/g, '{')
      .replace(/;\s*/g, ';')
      .trim();
    
    await fs.writeFile(file, content);
  }

  // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JS —Ñ–∞–π–ª–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è)
  const jsFiles = await getFilesByExtension(buildDir, '.js');
  for (const file of jsFiles) {
    let content = await fs.readFile(file, 'utf8');
    
    // –£–¥–∞–ª–µ–Ω–∏–µ console.log –≤ production
    content = content.replace(/console\.log\([^)]*\);?/g, '');
    
    await fs.writeFile(file, content);
  }
}

async function getFilesByExtension(dir, ext) {
  const files = [];
  
  async function scan(currentDir) {
    const items = await fs.readdir(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = await fs.stat(fullPath);
      
      if (stat.isDirectory()) {
        await scan(fullPath);
      } else if (path.extname(item) === ext) {
        files.push(fullPath);
      }
    }
  }
  
  await scan(dir);
  return files;
}

async function createFileManifest() {
  const manifest = {
    version: "1.0.0",
    buildTime: new Date().toISOString(),
    files: {},
    totalSize: 0
  };

  async function processDir(dir, relativePath = '') {
    const items = await fs.readdir(dir);
    
    for (const item of items) {
      const fullPath = path.join(dir, item);
      const itemRelativePath = relativePath ? `${relativePath}/${item}` : item;
      const stat = await fs.stat(fullPath);
      
      if (stat.isDirectory()) {
        await processDir(fullPath, itemRelativePath);
      } else {
        const size = stat.size;
        manifest.files[itemRelativePath] = {
          size: size,
          hash: require('crypto').createHash('md5').update(await fs.readFile(fullPath)).digest('hex').substring(0, 8)
        };
        manifest.totalSize += size;
      }
    }
  }

  await processDir(buildDir);
  
  await fs.writeJson(path.join(buildDir, 'manifest.json'), manifest, { spaces: 2 });
}

async function showBuildStats() {
  const manifestPath = path.join(buildDir, 'manifest.json');
  
  if (await fs.pathExists(manifestPath)) {
    const manifest = await fs.readJson(manifestPath);
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∫–∏:');
    console.log(`üìÅ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(manifest.totalSize / 1024 / 1024).toFixed(2)} MB`);
    console.log(`üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: ${Object.keys(manifest.files).length}`);
    console.log(`üèóÔ∏è –í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: ${manifest.buildTime}`);
    
    // –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
    const fileTypes = {};
    Object.entries(manifest.files).forEach(([filename, info]) => {
      const ext = path.extname(filename).toLowerCase() || 'no-ext';
      if (!fileTypes[ext]) {
        fileTypes[ext] = { count: 0, size: 0 };
      }
      fileTypes[ext].count++;
      fileTypes[ext].size += info.size;
    });
    
    console.log('\nüìà –†–∞–∑–±–∏–≤–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤:');
    Object.entries(fileTypes)
      .sort(([,a], [,b]) => b.size - a.size)
      .forEach(([ext, info]) => {
        console.log(`  ${ext.padEnd(8)} ${info.count.toString().padStart(3)} —Ñ–∞–π–ª–æ–≤, ${(info.size / 1024).toFixed(1).padStart(8)} KB`);
      });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ ESP32
    if (manifest.totalSize > 8 * 1024 * 1024) {
      console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ª–∏–º–∏—Ç 8MB –¥–ª—è LittleFS');
    } else {
      console.log('\n‚úÖ –†–∞–∑–º–µ—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–æ–≤ ESP32 16MB');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏
buildWebInterface();