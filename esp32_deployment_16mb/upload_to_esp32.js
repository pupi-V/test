#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ ESP32 —á–µ—Ä–µ–∑ WiFi
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTTP API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ LittleFS
 */

const fs = require('fs-extra');
const path = require('path');
const axios = require('axios');
const FormData = require('form-data');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const ESP32_IP = process.env.ESP32_IP || '192.168.1.100';
const ESP32_PORT = process.env.ESP32_PORT || '80';
const ESP32_URL = `http://${ESP32_IP}:${ESP32_PORT}`;
const WEB_DIR = './data/dist';

console.log('üì° –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤ ESP32 16MB...');
console.log(`üéØ –¶–µ–ª–µ–≤–æ–π ESP32: ${ESP32_URL}\n`);

async function uploadWebInterface() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ESP32
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ESP32...');
    await checkESP32Connection();

    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    console.log('2Ô∏è‚É£ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...');
    const files = await getFilesRecursively(WEB_DIR);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`);

    // 3. –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (process.argv.includes('--clean')) {
      console.log('3Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤...');
      await cleanExistingFiles();
    }

    // 4. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
    console.log('4Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...');
    await uploadFiles(files);

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏...');
    await verifyUpload();

    console.log('\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω: ${ESP32_URL}`);

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
    process.exit(1);
  }
}

async function checkESP32Connection() {
  try {
    const response = await axios.get(`${ESP32_URL}/api/system/info`, {
      timeout: 5000
    });
    
    console.log(`   ‚úÖ ESP32 –¥–æ—Å—Ç—É–ø–µ–Ω`);
    console.log(`   üìä –ú–æ–¥–µ–ª—å: ${response.data.chipModel}`);
    console.log(`   üíæ Flash: ${(response.data.flashSize / 1024 / 1024).toFixed(1)}MB`);
    console.log(`   üÜì –°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å: ${(response.data.freeHeap / 1024).toFixed(1)}KB`);
    
  } catch (error) {
    throw new Error(`–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ESP32 –ø–æ –∞–¥—Ä–µ—Å—É ${ESP32_URL}`);
  }
}

async function getFilesRecursively(dir) {
  const files = [];
  
  async function scan(currentDir, relativePath = '') {
    const items = await fs.readdir(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const itemRelativePath = relativePath ? `${relativePath}/${item}` : item;
      const stat = await fs.stat(fullPath);
      
      if (stat.isDirectory()) {
        await scan(fullPath, itemRelativePath);
      } else {
        files.push({
          localPath: fullPath,
          remotePath: `/${itemRelativePath}`,
          size: stat.size
        });
      }
    }
  }
  
  await scan(dir);
  return files;
}

async function cleanExistingFiles() {
  try {
    await axios.delete(`${ESP32_URL}/api/files`, {
      timeout: 10000
    });
    console.log('   ‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã');
  } catch (error) {
    console.log('   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã (–≤–æ–∑–º–æ–∂–Ω–æ, endpoint –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)');
  }
}

async function uploadFiles(files) {
  const totalSize = files.reduce((sum, file) => sum + file.size, 0);
  let uploadedSize = 0;
  
  console.log(`   üì¶ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(totalSize / 1024 / 1024).toFixed(2)}MB`);
  
  for (let i = 0; i < files.length; i++) {
    const file = files[i];
    
    try {
      await uploadSingleFile(file);
      uploadedSize += file.size;
      
      const progress = ((i + 1) / files.length * 100).toFixed(1);
      const sizeProgress = (uploadedSize / totalSize * 100).toFixed(1);
      
      console.log(`   üì§ [${progress}%] ${file.remotePath} (${(file.size / 1024).toFixed(1)}KB)`);
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${file.remotePath}: ${error.message}`);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
      if (!process.argv.includes('--continue-on-error')) {
        throw error;
      }
    }
  }
}

async function uploadSingleFile(file) {
  const formData = new FormData();
  const fileStream = fs.createReadStream(file.localPath);
  
  formData.append('file', fileStream, {
    filename: path.basename(file.remotePath),
    contentType: getContentType(file.remotePath)
  });
  formData.append('path', file.remotePath);
  
  await axios.post(`${ESP32_URL}/api/files/upload`, formData, {
    headers: {
      ...formData.getHeaders(),
    },
    timeout: 30000,
    maxContentLength: 10 * 1024 * 1024, // 10MB –ª–∏–º–∏—Ç
  });
}

function getContentType(filename) {
  const ext = path.extname(filename).toLowerCase();
  const mimeTypes = {
    '.html': 'text/html',
    '.css': 'text/css',
    '.js': 'application/javascript',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon',
    '.woff': 'font/woff',
    '.woff2': 'font/woff2',
    '.ttf': 'font/ttf',
    '.eot': 'application/vnd.ms-fontobject'
  };
  
  return mimeTypes[ext] || 'application/octet-stream';
}

async function verifyUpload() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    const response = await axios.get(ESP32_URL, {
      timeout: 10000,
      headers: {
        'Accept': 'text/html'
      }
    });
    
    if (response.status === 200 && response.data.includes('Charging Station')) {
      console.log('   ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('   ‚ö†Ô∏è  –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –Ω–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    const apiResponse = await axios.get(`${ESP32_URL}/api/stations`, {
      timeout: 5000
    });
    
    if (apiResponse.status === 200) {
      console.log('   ‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
  } catch (error) {
    console.log('   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É');
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node upload_to_esp32.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --clean                    –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
  --continue-on-error        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  --esp32-ip=192.168.1.100   IP –∞–¥—Ä–µ—Å ESP32 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 192.168.1.100)
  --help, -h                 –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  ESP32_IP                   IP –∞–¥—Ä–µ—Å ESP32
  ESP32_PORT                 –ü–æ—Ä—Ç ESP32 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 80)

–ü—Ä–∏–º–µ—Ä—ã:
  node upload_to_esp32.js --esp32-ip=192.168.1.150
  ESP32_IP=192.168.1.200 node upload_to_esp32.js --clean
`);
  process.exit(0);
}

// –ü–∞—Ä—Å–∏–Ω–≥ IP –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const ipArg = process.argv.find(arg => arg.startsWith('--esp32-ip='));
if (ipArg) {
  const ip = ipArg.split('=')[1];
  if (ip) {
    process.env.ESP32_IP = ip;
  }
}

// –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏
uploadWebInterface();