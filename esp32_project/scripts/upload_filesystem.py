#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ ESP32
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ–±-—Ñ–∞–π–ª–æ–≤ –≤ LittleFS
"""

import os
import subprocess
import sys
import argparse

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    print(f"üîÑ {description}...")
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False

def main():
    parser = argparse.ArgumentParser(description='–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã ESP32')
    parser.add_argument('--port', '-p', help='COM –ø–æ—Ä—Ç ESP32')
    parser.add_argument('--build-only', action='store_true', 
                       help='–¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏')
    
    args = parser.parse_args()
    
    print("üíæ ESP32 –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
    required_files = [
        "data/www/index.html",
        "data/stations.json"
    ]
    
    for file_path in required_files:
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            sys.exit(1)
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –°–±–æ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    if not run_command("pio run --target buildfs", "–°–±–æ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"):
        sys.exit(1)
    
    if args.build_only:
        print("‚úÖ –°–±–æ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        sys.exit(0)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    upload_cmd = "pio run --target uploadfs"
    if args.port:
        upload_cmd += f" --upload-port {args.port}"
    
    print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ESP32 –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    if run_command(upload_cmd, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"):
        print("\nüéâ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        print("üìã –§–∞–π–ª—ã –≤ ESP32:")
        print("  - /www/index.html - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("  - /stations.json - –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–π")
        print("\n–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ ESP32 –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
        sys.exit(1)

if __name__ == "__main__":
    main()