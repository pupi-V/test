#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è ESP32
–ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤ ESP32
"""

import os
import sys
import shutil
import subprocess

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    print(f"üîÑ {description}...")
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False

def copy_web_files():
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-—Ñ–∞–π–ª–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    source_dist = "../dist/public"
    target_www = "data/www"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(source_dist):
        print(f"‚ùå –ü–∞–ø–∫–∞ {source_dist} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        print("–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç:")
        print("cd .. && npm run build")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–∏
    os.makedirs(target_www, exist_ok=True)
    
    # –û—á–∏—Å—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–∏
    for item in os.listdir(target_www):
        item_path = os.path.join(target_www, item)
        if os.path.isdir(item_path):
            shutil.rmtree(item_path)
        else:
            os.remove(item_path)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    total_size = 0
    for root, dirs, files in os.walk(source_dist):
        for file in files:
            file_path = os.path.join(root, file)
            total_size += os.path.getsize(file_path)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ KB/MB
    size_kb = total_size / 1024
    size_mb = size_kb / 1024
    
    print(f"üìä –†–∞–∑–º–µ—Ä –≤–µ–±-—Ñ–∞–π–ª–æ–≤: {size_kb:.1f} KB ({size_mb:.2f} MB)")
    
    if size_mb > 2:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í–µ–±-—Ñ–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–ª—è ESP32")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∂–∞—Ç–∏–µ")
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    try:
        for item in os.listdir(source_dist):
            source_item = os.path.join(source_dist, item)
            target_item = os.path.join(target_www, item)
            
            if os.path.isdir(source_item):
                shutil.copytree(source_item, target_item)
            else:
                shutil.copy2(source_item, target_item)
        
        print("‚úÖ –í–µ–±-—Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def optimize_files():
    """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è ESP32"""
    print("üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è ESP32...")
    
    www_path = "data/www"
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    files_to_check = []
    for root, dirs, files in os.walk(www_path):
        for file in files:
            if file.endswith(('.html', '.js', '.css')):
                files_to_check.append(os.path.join(root, file))
    
    optimized_count = 0
    
    for file_path in files_to_check:
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_size = len(content)
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            if file_path.endswith('.html'):
                # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ HTML
                lines = content.split('\n')
                optimized_lines = []
                for line in lines:
                    stripped = line.strip()
                    if stripped and not stripped.startswith('<!--'):
                        optimized_lines.append(stripped)
                content = '\n'.join(optimized_lines)
            
            new_size = len(content)
            
            if new_size < original_size:
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                saved_bytes = original_size - new_size
                print(f"üìâ {os.path.basename(file_path)}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_bytes} –±–∞–π—Ç")
                optimized_count += 1
        
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {file_path}: {e}")
    
    print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {optimized_count} —Ñ–∞–π–ª–æ–≤")
    return True

def update_cpp_code():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ C++ –∫–æ–¥–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤–µ–±-—Ñ–∞–π–ª–∞–º–∏"""
    print("üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ C++ –∫–æ–¥–∞...")
    
    cpp_file = "src/main.cpp"
    
    if not os.path.exists(cpp_file):
        print(f"‚ùå –§–∞–π–ª {cpp_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(cpp_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω—É–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if "setDefaultFile" in content and "text/html" in content:
            print("‚úÖ C++ –∫–æ–¥ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            return True
        
        print("‚úÖ C++ –∫–æ–¥ –≥–æ—Ç–æ–≤ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        return True
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è C++ –∫–æ–¥–∞: {e}")
        return False

def main():
    print("üåê –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è ESP32")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists("platformio.ini"):
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ ESP32 –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    # –®–∞–≥ 1: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-—Ñ–∞–π–ª–æ–≤
    if not copy_web_files():
        sys.exit(1)
    
    # –®–∞–≥ 2: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    if not optimize_files():
        sys.exit(1)
    
    # –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ C++ –∫–æ–¥–∞
    if not update_cpp_code():
        sys.exit(1)
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–±–æ—Ä–∫–µ
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–±–æ—Ä–∫–µ...")
    
    required_files = [
        "data/www/index.html",
        "src/main.cpp",
        "platformio.ini"
    ]
    
    all_files_exist = True
    for file_path in required_files:
        if os.path.exists(file_path):
            file_size = os.path.getsize(file_path)
            print(f"‚úÖ {file_path} ({file_size} –±–∞–π—Ç)")
        else:
            print(f"‚ùå {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_files_exist = False
    
    if not all_files_exist:
        print("\n‚ùå –ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        sys.exit(1)
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤–µ–±-—Ñ–∞–π–ª–æ–≤
    www_size = 0
    for root, dirs, files in os.walk("data/www"):
        for file in files:
            www_size += os.path.getsize(os.path.join(root, file))
    
    www_size_kb = www_size / 1024
    
    print(f"\nüìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {www_size_kb:.1f} KB")
    
    if www_size_kb > 512:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–ª—è ESP32")
        print("–°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ –∏–ª–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ")
    else:
        print("‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è ESP32")
    
    print("\nüéâ –ü–û–î–ì–û–¢–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –°–æ–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—à–∏–≤–∫—É: pio run")
    print("2. –°–æ–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: pio run --target buildfs")
    print("3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø—Ä–æ—à–∏–≤–∫—É: pio run --target upload")
    print("4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–µ–±-—Ñ–∞–π–ª—ã: pio run --target uploadfs")
    print("\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç:")
    print("python scripts/build_and_upload.py")

if __name__ == "__main__":
    main()