#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ ESP32 –ø—Ä–æ–µ–∫—Ç–∞
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∫–∏ –ø—Ä–æ—à–∏–≤–∫–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
"""

import os
import sys
import subprocess
import time
import argparse

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    print(f"\n{'='*50}")
    print(f"üîÑ {description}")
    print(f"{'='*50}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û")
        if result.stdout:
            print("–í—ã–≤–æ–¥:")
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        if e.stdout:
            print("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥:")
            print(e.stdout)
        if e.stderr:
            print("–û—à–∏–±–∫–∏:")
            print(e.stderr)
        return False

def check_platformio():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PlatformIO"""
    try:
        result = subprocess.run("pio --version", shell=True, 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ PlatformIO —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå PlatformIO –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except:
        print("‚ùå PlatformIO –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def main():
    parser = argparse.ArgumentParser(description='–°–±–æ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ ESP32 –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--port', '-p', help='COM –ø–æ—Ä—Ç ESP32 (–Ω–∞–ø—Ä–∏–º–µ—Ä, COM3)')
    parser.add_argument('--no-filesystem', action='store_true', 
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--only-build', action='store_true', 
                       help='–¢–æ–ª—å–∫–æ —Å–±–æ—Ä–∫–∞ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏')
    parser.add_argument('--monitor', action='store_true', 
                       help='–û—Ç–∫—Ä—ã—Ç—å Serial Monitor –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏')
    parser.add_argument('--update-web', action='store_true',
                       help='–û–±–Ω–æ–≤–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞')
    
    args = parser.parse_args()
    
    print("üîå ESP32 Charging Station Management System")
    print("üìã –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PlatformIO
    if not check_platformio():
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PlatformIO:")
        print("pip install platformio")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    if not os.path.exists("platformio.ini"):
        print("‚ùå –§–∞–π–ª platformio.ini –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ ESP32 –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    success = True
    
    # –≠—Ç–∞–ø 0: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ)
    if args.update_web:
        if run_command("python scripts/build_web_interface.py", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"):
            print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞")
        else:
            print("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏")
    
    # –≠—Ç–∞–ø 1: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    if run_command("pio run --target clean", "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"):
        print("üßπ –ü—Ä–æ–µ–∫—Ç –æ—á–∏—â–µ–Ω")
    
    # –≠—Ç–∞–ø 2: –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    if not run_command("pio run", "–°–±–æ—Ä–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏"):
        success = False
    
    # –≠—Ç–∞–ø 3: –°–±–æ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    if not args.no_filesystem:
        if not run_command("pio run --target buildfs", "–°–±–æ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"):
            success = False
    
    if not success:
        print("\n‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        sys.exit(1)
    
    if args.only_build:
        print("\n‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)
    
    # –≠—Ç–∞–ø 4: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏
    upload_cmd = "pio run --target upload"
    if args.port:
        upload_cmd += f" --upload-port {args.port}"
    
    print("\nüì§ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ—à–∏–≤–∫–∏...")
    print("üí° –ï—Å–ª–∏ ESP32 –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   1. –ó–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É BOOT –Ω–∞ –ø–ª–∞—Ç–µ")
    print("   2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É Reset (–∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ/–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ)")
    print("   3. –û—Ç–ø—É—Å—Ç–∏—Ç–µ –∫–Ω–æ–ø–∫—É BOOT")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    if not run_command(upload_cmd, "–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏"):
        print("\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—à–∏–≤–∫–∏")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ESP32")
        print("2. –ó–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É BOOT –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")
        print("3. –£–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π COM –ø–æ—Ä—Ç: --port COM3")
        sys.exit(1)
    
    # –≠—Ç–∞–ø 5: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    if not args.no_filesystem:
        print("\nüíæ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
        
        uploadfs_cmd = "pio run --target uploadfs"
        if args.port:
            uploadfs_cmd += f" --upload-port {args.port}"
        
        if not run_command(uploadfs_cmd, "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"):
            print("\n‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
            print("–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    print("\nüéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. üîå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ WiFi —Å–µ—Ç–∏ 'ESP32_ChargingStations'")
    print("2. üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É: http://192.168.4.1")
    print("3. üì± –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: http://chargingstations.local")
    
    # –ó–∞–ø—É—Å–∫ Serial Monitor
    if args.monitor:
        print("\nüñ•Ô∏è  –ó–∞–ø—É—Å–∫ Serial Monitor...")
        time.sleep(2)
        
        monitor_cmd = "pio device monitor"
        if args.port:
            monitor_cmd += f" --port {args.port}"
        
        try:
            subprocess.run(monitor_cmd, shell=True)
        except KeyboardInterrupt:
            print("\nüëã Serial Monitor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("\nüí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: pio device monitor")
        if args.port:
            print(f"   –∏–ª–∏: pio device monitor --port {args.port}")

if __name__ == "__main__":
    main()