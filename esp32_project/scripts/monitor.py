#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è ESP32 —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º –ª–æ–≥–æ–≤
"""

import subprocess
import sys
import argparse
import re
import datetime

class ESP32Monitor:
    def __init__(self, port=None, baud=115200):
        self.port = port
        self.baud = baud
        self.filters = {
            'error': r'(ERROR|–û–®–ò–ë–ö–ê|Failed|–û—à–∏–±–∫–∞)',
            'warning': r'(WARNING|WARN|–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)',
            'success': r'(SUCCESS|‚úÖ|—É—Å–ø–µ—à–Ω–æ|–≥–æ—Ç–æ–≤)',
            'network': r'(WiFi|IP|WebSocket|HTTP)',
            'stations': r'(station|—Å—Ç–∞–Ω—Ü–∏|charging|–∑–∞—Ä—è–¥–Ω)'
        }
    
    def colorize_output(self, line):
        """–†–∞—Å–∫—Ä–∞—Å–∫–∞ –≤—ã–≤–æ–¥–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"""
        # ANSI –∫–æ–¥—ã —Ü–≤–µ—Ç–æ–≤
        RED = '\033[91m'
        GREEN = '\033[92m'
        YELLOW = '\033[93m'
        BLUE = '\033[94m'
        MAGENTA = '\033[95m'
        CYAN = '\033[96m'
        WHITE = '\033[97m'
        RESET = '\033[0m'
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        if re.search(self.filters['error'], line, re.IGNORECASE):
            return f"{RED}{line}{RESET}"
        elif re.search(self.filters['warning'], line, re.IGNORECASE):
            return f"{YELLOW}{line}{RESET}"
        elif re.search(self.filters['success'], line, re.IGNORECASE):
            return f"{GREEN}{line}{RESET}"
        elif re.search(self.filters['network'], line, re.IGNORECASE):
            return f"{BLUE}{line}{RESET}"
        elif re.search(self.filters['stations'], line, re.IGNORECASE):
            return f"{CYAN}{line}{RESET}"
        else:
            return line
    
    def start_monitoring(self, filter_type=None, save_log=False):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        cmd = ["pio", "device", "monitor"]
        if self.port:
            cmd.extend(["--port", self.port])
        cmd.extend(["--baud", str(self.baud)])
        
        print(f"üñ•Ô∏è  –ó–∞–ø—É—Å–∫ ESP32 Monitor")
        print(f"üì° –ü–æ—Ä—Ç: {self.port or '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π'}")
        print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {self.baud}")
        if filter_type:
            print(f"üîç –§–∏–ª—å—Ç—Ä: {filter_type}")
        print("=" * 50)
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 50)
        
        log_file = None
        if save_log:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            log_filename = f"esp32_log_{timestamp}.txt"
            log_file = open(log_filename, 'w', encoding='utf-8')
            print(f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤: {log_filename}")
        
        try:
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, 
                                     stderr=subprocess.STDOUT, 
                                     universal_newlines=True, 
                                     bufsize=1)
            
            for line in iter(process.stdout.readline, ''):
                line = line.rstrip()
                if not line:
                    continue
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
                if filter_type and filter_type in self.filters:
                    if not re.search(self.filters[filter_type], line, re.IGNORECASE):
                        continue
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
                timestamp = datetime.datetime.now().strftime("%H:%M:%S")
                formatted_line = f"[{timestamp}] {line}"
                
                # –†–∞—Å–∫—Ä–∞—Å–∫–∞ –∏ –≤—ã–≤–æ–¥
                colored_line = self.colorize_output(formatted_line)
                print(colored_line)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–≥
                if log_file:
                    log_file.write(formatted_line + '\n')
                    log_file.flush()
        
        except KeyboardInterrupt:
            print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        finally:
            if log_file:
                log_file.close()
                print(f"üìÅ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {log_filename}")

def main():
    parser = argparse.ArgumentParser(description='–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä ESP32')
    parser.add_argument('--port', '-p', help='COM –ø–æ—Ä—Ç ESP32')
    parser.add_argument('--baud', '-b', type=int, default=115200, 
                       help='–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 115200)')
    parser.add_argument('--filter', '-f', 
                       choices=['error', 'warning', 'success', 'network', 'stations'],
                       help='–§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É')
    parser.add_argument('--save-log', '-s', action='store_true',
                       help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –≤ —Ñ–∞–π–ª')
    
    args = parser.parse_args()
    
    monitor = ESP32Monitor(args.port, args.baud)
    monitor.start_monitoring(args.filter, args.save_log)

if __name__ == "__main__":
    main()