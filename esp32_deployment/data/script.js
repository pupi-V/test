// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let stations = [];
let currentEditingStationId = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    setupEventListeners();
    loadStations();
    displayESP32Info();
}

function setupEventListeners() {
    // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    document.getElementById('refresh-btn').addEventListener('click', loadStations);
    document.getElementById('scan-btn').addEventListener('click', scanESP32Boards);
    document.getElementById('add-station-btn').addEventListener('click', openAddModal);
    
    // –§–æ—Ä–º—ã
    document.getElementById('add-station-form').addEventListener('submit', handleAddStation);
    document.getElementById('edit-station-form').addEventListener('submit', handleEditStation);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.querySelectorAll('.close').forEach(close => {
        close.addEventListener('click', closeModals);
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –Ω–∏—Ö
    window.addEventListener('click', function(event) {
        if (event.target.classList.contains('modal')) {
            closeModals();
        }
    });
}

function displayESP32Info() {
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ ESP32
    document.getElementById('esp32-ip').textContent = `ESP32: ${window.location.hostname}`;
}

async function loadStations() {
    try {
        showLoading();
        const response = await fetch('/api/stations');
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        stations = await response.json();
        renderStations();
        showSuccess('–°—Ç–∞–Ω—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–Ω—Ü–∏–π:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞–Ω—Ü–∏–π: ' + error.message);
    }
}

function renderStations() {
    const container = document.getElementById('stations-container');
    
    if (stations.length === 0) {
        container.innerHTML = `
            <div class="loading">
                <h3>–°—Ç–∞–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = stations.map(station => `
        <div class="station-card">
            <div class="station-header">
                <div class="station-name">${station.displayName}</div>
                <div class="station-type type-${station.type}">${station.type.toUpperCase()}</div>
            </div>
            
            <div class="station-status status-${station.status}">${getStatusLabel(station.status)}</div>
            
            <div class="station-details">
                <div class="detail-row">
                    <span>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–º—è:</span>
                    <span>${station.technicalName}</span>
                </div>
                <div class="detail-row">
                    <span>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å:</span>
                    <span>${station.maxPower} –∫–í—Ç</span>
                </div>
                <div class="detail-row">
                    <span>–¢–µ–∫—É—â–∞—è –º–æ—â–Ω–æ—Å—Ç—å:</span>
                    <span>${station.currentPower} –∫–í—Ç</span>
                </div>
                <div class="detail-row">
                    <span>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</span>
                    <span>${station.carConnection ? 'üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω' : 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}</span>
                </div>
                <div class="detail-row">
                    <span>–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞—Ä—è–¥–∫–∏:</span>
                    <span>${station.carChargingPermission ? 'üü¢ –†–∞–∑—Ä–µ—à–µ–Ω–æ' : 'üî¥ –ó–∞–ø—Ä–µ—â–µ–Ω–æ'}</span>
                </div>
                ${station.type === 'slave' ? `
                <div class="detail-row">
                    <span>–ú–∞—Å—Ç–µ—Ä –æ–Ω–ª–∞–π–Ω:</span>
                    <span>${station.masterOnline ? 'üü¢ –î–∞' : 'üî¥ –ù–µ—Ç'}</span>
                </div>
                <div class="detail-row">
                    <span>–î–æ—Å—Ç—É–ø–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å:</span>
                    <span>${station.masterAvailablePower} –∫–í—Ç</span>
                </div>
                ` : ''}
            </div>
            
            <div class="station-actions">
                <button class="btn btn-primary" onclick="openEditModal(${station.id})">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                <button class="btn btn-warning" onclick="toggleCharging(${station.id})">
                    ${station.carChargingPermission ? '‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å'}
                </button>
            </div>
        </div>
    `).join('');
}

function getStatusLabel(status) {
    const labels = {
        'available': '–î–æ—Å—Ç—É–ø–Ω–∞',
        'charging': '–ó–∞—Ä—è–∂–∞–µ—Ç—Å—è',
        'offline': '–û—Ç–∫–ª—é—á–µ–Ω–∞',
        'online': '–û–Ω–ª–∞–π–Ω',
        'maintenance': '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'
    };
    return labels[status] || status;
}

async function scanESP32Boards() {
    try {
        showMessage('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ESP32 –ø–ª–∞—Ç...', 'info');
        const response = await fetch('/api/esp32/scan', { method: 'POST' });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const boards = await response.json();
        
        if (boards.length === 0) {
            showMessage('ESP32 –ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'warning');
        } else {
            showSuccess(`–ù–∞–π–¥–µ–Ω–æ ${boards.length} ESP32 –ø–ª–∞—Ç`);
            console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç—ã:', boards);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        showError('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
    }
}

function openAddModal() {
    document.getElementById('add-station-modal').style.display = 'block';
}

function openEditModal(stationId) {
    const station = stations.find(s => s.id === stationId);
    if (!station) return;
    
    currentEditingStationId = stationId;
    
    document.getElementById('edit-station-id').value = station.id;
    document.getElementById('edit-display-name').value = station.displayName;
    document.getElementById('edit-max-power').value = station.maxPower;
    document.getElementById('edit-current-power').value = station.currentPower;
    document.getElementById('edit-status').value = station.status;
    document.getElementById('edit-car-connection').checked = station.carConnection;
    
    document.getElementById('edit-station-modal').style.display = 'block';
}

function closeModals() {
    document.getElementById('add-station-modal').style.display = 'none';
    document.getElementById('edit-station-modal').style.display = 'none';
    currentEditingStationId = null;
}

function closeModal() {
    closeModals();
}

function closeEditModal() {
    closeModals();
}

async function handleAddStation(event) {
    event.preventDefault();
    
    const formData = {
        displayName: document.getElementById('display-name').value,
        technicalName: document.getElementById('technical-name').value,
        type: document.getElementById('type').value,
        maxPower: parseFloat(document.getElementById('max-power').value)
    };
    
    try {
        const response = await fetch('/api/stations', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        showSuccess('–°—Ç–∞–Ω—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        closeModals();
        document.getElementById('add-station-form').reset();
        loadStations();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏: ' + error.message);
    }
}

async function handleEditStation(event) {
    event.preventDefault();
    
    if (!currentEditingStationId) return;
    
    const formData = {
        id: currentEditingStationId,
        displayName: document.getElementById('edit-display-name').value,
        maxPower: parseFloat(document.getElementById('edit-max-power').value),
        currentPower: parseFloat(document.getElementById('edit-current-power').value),
        status: document.getElementById('edit-status').value,
        carConnection: document.getElementById('edit-car-connection').checked
    };
    
    try {
        const response = await fetch('/api/stations/update', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        showSuccess('–°—Ç–∞–Ω—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        closeModals();
        loadStations();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏:', error);
        showError('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏: ' + error.message);
    }
}

async function toggleCharging(stationId) {
    const station = stations.find(s => s.id === stationId);
    if (!station) return;
    
    const newPermission = !station.carChargingPermission;
    
    try {
        const response = await fetch('/api/stations/update', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                id: stationId,
                carChargingPermission: newPermission,
                status: newPermission ? 'charging' : 'available'
            })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        showSuccess(newPermission ? '–ó–∞—Ä—è–¥–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞' : '–ó–∞—Ä—è–¥–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        loadStations();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ä—è–¥–∫–æ–π:', error);
        showError('–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—Ä—è–¥–∫–æ–π: ' + error.message);
    }
}

function showLoading() {
    document.getElementById('stations-container').innerHTML = `
        <div class="loading">
            <h3>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</h3>
            <p>–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–Ω—Ü–∏—è—Ö</p>
        </div>
    `;
}

function showMessage(message, type = 'info') {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const existingMessages = document.querySelectorAll('.message');
    existingMessages.forEach(msg => msg.remove());
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${type}`;
    messageDiv.textContent = message;
    
    document.querySelector('.container').insertBefore(messageDiv, document.querySelector('main'));
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        messageDiv.remove();
    }, 5000);
}

function showError(message) {
    showMessage(message, 'error');
}

function showSuccess(message) {
    showMessage(message, 'success');
}